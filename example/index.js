// Generated by psc-bundle 0.11.6
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["Discard"] = Discard;
  exports["bind"] = bind;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* globals setTimeout, clearTimeout, setImmediate, clearImmediate */
  "use strict";

  exports._makeAff = function (cb) {
    return function (success, error) {
      try {
        return cb(function (e) {
          return function () {
            error(e);
          };
        })(function (v) {
          return function () {
            success(v);
          };
        })();
      } catch (err) {
        error(err);
      }
    };
  };

  exports._pure = function (nonCanceler, v) {
    return function (success) {
      success(v);
      return nonCanceler;
    };
  };

  exports._fmap = function (f, aff) {
    return function (success, error) {
      return aff(function (v) {
        success(f(v));
      }, error);
    };
  };

  exports._bind = function (alwaysCanceler, aff, f) {
    return function (success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function () {};

      canceler1 = aff(function (v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function (e) {
        return function (s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function (bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function (canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  };

  exports._runAff = function (errorT, successT, aff) {
    // If errorT or successT throw, and an Aff is comprised only of synchronous
    // effects, then it's possible for makeAff/liftEff to accidentally catch
    // it, which may end up rerunning the Aff depending on error recovery
    // behavior. To mitigate this, we observe synchronicity using mutation. If
    // an Aff is observed to be synchronous, we let the stack reset and run the
    // handlers outside of the normal callback flow.
    return function () {
      var status = 0;
      var result, success;

      var canceler = aff(function (v) {
        if (status === 2) {
          successT(v)();
        } else {
          status = 1;
          result = v;
          success = true;
        }
      }, function (e) {
        if (status === 2) {
          errorT(e)();
        } else {
          status = 1;
          result = e;
          success = false;
        }
      });

      if (status === 1) {
        if (success) {
          successT(result)();
        } else {
          errorT(result)();
        }
      } else {
        status = 2;
      }

      return canceler;
    };
  };

  exports._liftEff = function (nonCanceler, e) {
    return function (success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["MonadEff"] = MonadEff;
  exports["liftEff"] = liftEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.showErrorImpl = function (err) {
    return err.stack || err.toString();
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                                                     
  var showError = new Data_Show.Show($foreign.showErrorImpl);
  exports["showError"] = showError;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };         
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](nonCanceler))(h(e)(a));
          };
      });
  };                                                                         
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  exports["makeAff"] = makeAff;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  var errorShow = function (dictShow) {
      return function (a) {
          return $foreign.error(Data_Show.show(dictShow)(a));
      };
  };
  exports["errorShow"] = errorShow;
  exports["logShow"] = logShow;
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.mkEffFn1 = function mkEffFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.runEffFn1 = function runEffFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn3 = function runEffFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };

  exports.runEffFn4 = function runEffFn4(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["mkEffFn1"] = $foreign.mkEffFn1;
  exports["runEffFn1"] = $foreign.runEffFn1;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn3"] = $foreign.runEffFn3;
  exports["runEffFn4"] = $foreign.runEffFn4;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
    "use strict";        

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];                                          
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Data.Record.Class"];
  var Subrow = {};
  var srInst = function (dictUnion) {
      return Subrow;
  };
  exports["Subrow"] = Subrow;
  exports["srInst"] = srInst;
})(PS["Data.Record.Class"] = PS["Data.Record.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["SProxy"] = SProxy;
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic_Rep = PS["Data.Generic.Rep"];
  var Data_Generic_Rep_Show = PS["Data.Generic.Rep.Show"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Path_Pathy = PS["Data.Path.Pathy"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var IPv6Address = (function () {
      function IPv6Address(value0) {
          this.value0 = value0;
      };
      IPv6Address.create = function (value0) {
          return new IPv6Address(value0);
      };
      return IPv6Address;
  })();
  var IPv4Address = (function () {
      function IPv4Address(value0) {
          this.value0 = value0;
      };
      IPv4Address.create = function (value0) {
          return new IPv4Address(value0);
      };
      return IPv4Address;
  })();
  var NameAddress = (function () {
      function NameAddress(value0) {
          this.value0 = value0;
      };
      NameAddress.create = function (value0) {
          return new NameAddress(value0);
      };
      return NameAddress;
  })();
  exports["IPv6Address"] = IPv6Address;
  exports["IPv4Address"] = IPv4Address;
  exports["NameAddress"] = NameAddress;
})(PS["Data.URI"] = PS["Data.URI"] || {});
(function(exports) {
  /* globals exports */
  "use strict";                 
  exports.encodeURI = encodeURI;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Global"];
  exports["encodeURI"] = $foreign["encodeURI"];
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_URI = PS["Data.URI"];
  var Data_URI_Common = PS["Data.URI.Common"];
  var Global = PS["Global"];
  var Prelude = PS["Prelude"];
  var Text_Parsing_StringParser = PS["Text.Parsing.StringParser"];
  var Text_Parsing_StringParser_Combinators = PS["Text.Parsing.StringParser.Combinators"];
  var Text_Parsing_StringParser_String = PS["Text.Parsing.StringParser.String"];
  var print = function (v) {
      if (v instanceof Data_URI.IPv6Address) {
          return "[" + (v.value0 + "]");
      };
      if (v instanceof Data_URI.IPv4Address) {
          return v.value0;
      };
      if (v instanceof Data_URI.NameAddress) {
          return Global["encodeURI"](v.value0);
      };
      throw new Error("Failed pattern match at Data.URI.Host line 47, column 1 - line 47, column 22: " + [ v.constructor.name ]);
  };
  exports["print"] = print;
})(PS["Data.URI.Host"] = PS["Data.URI.Host"] || {});
(function(exports) {
    "use strict";
  var Sequelize =require("sequelize"); 

  exports.sequelizeImpl = function sequelizeImpl (ps) {
    var database = ps.database;
    var username = ps.username;
    var password = ps.password;
    delete ps.database;
    delete ps.username;
    delete ps.password;
    return new Sequelize(database,username,password,ps);
  };

  exports.authenticateImpl = function authenticateImpl (onError,onSuccess,sequelize) {
    sequelize.authenticate().then(onSuccess).catch(onError);
  };

  exports.syncImpl = function syncImpl (onError,onSuccess,sequelize) {
    sequelize.sync().then(onSuccess).catch(onError);
  };

  exports.defineImpl = function defineImpl (sequelize,modelName,fields) {
    return sequelize.define(modelName,fields);
  };
  var inflect =require("inflect");

  exports.hasManyImpl = function hasManyImpl (parent,child,childName) {
    parent.hasMany(child);
    return {
      get: function getImpl (onError,onSuccess,q) {
        q['get' + inflect.capitalize(inflect.pluralize(childName))]().then(onSuccess).catch(onError);
      },
      set: function setImpl (onError,onSuccess,q,xs) {
        q['set' + inflect.capitalize(inflect.pluralize(childName))](xs).then(onSuccess).catch(onError);
      },
      add: function addImpl (onError,onSuccess,q,xs) {
        q['add' + inflect.capitalize(inflect.pluralize(childName))](xs).then(onSuccess).catch(onError);
      },
      has: function hasImpl (onError,onSuccess,q,xs) {
        q['has' + inflect.capitalize(inflect.pluralize(childName))](xs).then(onSuccess).catch(onError);
      },
      remove: function removeImpl (onError,onSuccess,q,xs) {
        q['remove' + inflect.capitalize(inflect.pluralize(childName))](xs).then(onSuccess).catch(onError);
      }
    };
  };

  exports.findOneImpl = function findOneImpl (onError,onSuccess,Model,ps) {
    Model.findOne(ps).then(onSuccess).catch(onError);
  };

  exports.createImpl = function createImpl (onError,onSuccess,Model,fields) {
    Model.create(fields).then(onSuccess).catch(onError);
  };

  exports.getImpl = function getImpl (value,getParams) {
    return value.get(getParams);
  };
})(PS["Database.Sequelize"] = PS["Database.Sequelize"] || {});
(function(exports) {
    "use strict";

  exports.emptyModelDefinition = {};

  exports.unsafeAddModelDef = function unsafeAddModelDef (k,x,acc) {
    var q = {};
    q[k] = x;
    return Object.assign({},acc,q);
  };

  exports.unsafeAddDefaultValue = function unsafeAddDefaultValue (acc,v) {
    return Object.assign({},acc,{defaultValue: v});
  };

  exports.sqlSTRING = Sequelize.STRING;
  exports.sqlINTEGER = Sequelize.INTEGER;
})(PS["Database.Sequelize.Fields"] = PS["Database.Sequelize.Fields"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Database.Sequelize.Fields"];
  var Data_Date = PS["Data.Date"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Record_Class = PS["Data.Record.Class"];
  var Data_Symbol = PS["Data.Symbol"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var addFieldWithDefault = function (dictSubrow) {
      return function (dictIsSymbol) {
          return function (dictRowCons) {
              return function (k) {
                  return function (q) {
                      return function (d) {
                          return function (acc) {
                              return $foreign.unsafeAddModelDef(Data_Symbol.reflectSymbol(dictIsSymbol)(k), $foreign.unsafeAddDefaultValue(q, d), acc);
                          };
                      };
                  };
              };
          };
      };
  };
  var addField = function (dictSubrow) {
      return function (dictIsSymbol) {
          return function (dictRowCons) {
              return function (dictRowCons1) {
                  return function (k) {
                      return function (q) {
                          return function (acc) {
                              return $foreign.unsafeAddModelDef(Data_Symbol.reflectSymbol(dictIsSymbol)(k), q, acc);
                          };
                      };
                  };
              };
          };
      };
  };
  exports["addField"] = addField;
  exports["addFieldWithDefault"] = addFieldWithDefault;
  exports["emptyModelDefinition"] = $foreign.emptyModelDefinition;
  exports["sqlINTEGER"] = $foreign.sqlINTEGER;
  exports["sqlSTRING"] = $foreign.sqlSTRING;
})(PS["Database.Sequelize.Fields"] = PS["Database.Sequelize.Fields"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var $foreign = PS["Database.Sequelize"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Date = PS["Data.Date"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Record_Class = PS["Data.Record.Class"];
  var Data_Show = PS["Data.Show"];
  var Data_URI = PS["Data.URI"];
  var Data_URI_Host = PS["Data.URI.Host"];
  var Data_Unit = PS["Data.Unit"];
  var Database_Sequelize_Fields = PS["Database.Sequelize.Fields"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Model = (function () {
      function Model(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Model.create = function (value0) {
          return function (value1) {
              return new Model(value0, value1);
          };
      };
      return Model;
  })();
  var Mysql = (function () {
      function Mysql() {

      };
      Mysql.value = new Mysql();
      return Mysql;
  })();
  var Sqlite = (function () {
      function Sqlite() {

      };
      Sqlite.value = new Sqlite();
      return Sqlite;
  })();
  var Postgres = (function () {
      function Postgres() {

      };
      Postgres.value = new Postgres();
      return Postgres;
  })();
  var Mssql = (function () {
      function Mssql() {

      };
      Mssql.value = new Mssql();
      return Mssql;
  })();
  var sync = function (sql) {
      return Control_Monad_Aff.makeAff(function (onError) {
          return function (onSuccess) {
              return Control_Monad_Eff_Uncurried.runEffFn3($foreign.syncImpl)(Control_Monad_Eff_Uncurried.mkEffFn1(onError))(onSuccess(Data_Unit.unit))(sql);
          };
      });
  };
  var showDialect = new Data_Show.Show(function (v) {
      if (v instanceof Mysql) {
          return "mysql";
      };
      if (v instanceof Sqlite) {
          return "sqlite";
      };
      if (v instanceof Postgres) {
          return "postgres";
      };
      if (v instanceof Mssql) {
          return "mssql";
      };
      throw new Error("Failed pattern match at Database.Sequelize line 37, column 1 - line 37, column 37: " + [ v.constructor.name ]);
  });
  var toSequelizeImplParams = function (v) {
      return {
          database: v.database, 
          username: v.username, 
          password: v.password, 
          pool: v.pool, 
          host: Data_URI_Host.print(v.host), 
          dialect: Data_Show.show(showDialect)(v.dialect)
      };
  };
  var sequelize = function (x) {
      return Control_Monad_Eff_Uncurried.runEffFn1($foreign.sequelizeImpl)(toSequelizeImplParams(x));
  };
  var hasMany = function (v) {
      return function (v1) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Uncurried.runEffFn3($foreign.hasManyImpl)(v.value1)(v1.value1)(v1.value0)))(function (v2) {
              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)({
                  get: function (q) {
                      return Control_Monad_Aff.makeAff(function (onError) {
                          return function (onSuccess) {
                              return Control_Monad_Eff_Uncurried.runEffFn3(v2.get)(Control_Monad_Eff_Uncurried.mkEffFn1(onError))(Control_Monad_Eff_Uncurried.mkEffFn1(onSuccess))(q);
                          };
                      });
                  }, 
                  set: function (q) {
                      return function (is) {
                          return Control_Monad_Aff.makeAff(function (onError) {
                              return function (onSuccess) {
                                  return Control_Monad_Eff_Uncurried.runEffFn4(v2.set)(Control_Monad_Eff_Uncurried.mkEffFn1(onError))(onSuccess(Data_Unit.unit))(q)(is);
                              };
                          });
                      };
                  }, 
                  add: function (q) {
                      return function (is) {
                          return Control_Monad_Aff.makeAff(function (onError) {
                              return function (onSuccess) {
                                  return Control_Monad_Eff_Uncurried.runEffFn4(v2.add)(Control_Monad_Eff_Uncurried.mkEffFn1(onError))(onSuccess(Data_Unit.unit))(q)(is);
                              };
                          });
                      };
                  }, 
                  has: function (q) {
                      return function (is) {
                          return Control_Monad_Aff.makeAff(function (onError) {
                              return function (onSuccess) {
                                  return Control_Monad_Eff_Uncurried.runEffFn4(v2.has)(Control_Monad_Eff_Uncurried.mkEffFn1(onError))(Control_Monad_Eff_Uncurried.mkEffFn1(onSuccess))(q)(is);
                              };
                          });
                      };
                  }, 
                  remove: function (q) {
                      return function (is) {
                          return Control_Monad_Aff.makeAff(function (onError) {
                              return function (onSuccess) {
                                  return Control_Monad_Eff_Uncurried.runEffFn4(v2.remove)(Control_Monad_Eff_Uncurried.mkEffFn1(onError))(onSuccess(Data_Unit.unit))(q)(is);
                              };
                          });
                      };
                  }
              });
          });
      };
  };
  var get = Control_Monad_Eff_Uncurried.runEffFn2($foreign.getImpl);
  var findOne = function (v) {
      return function (f) {
          return Control_Monad_Aff.makeAff(function (onError) {
              return function (onSuccess) {
                  return Control_Monad_Eff_Uncurried.runEffFn4($foreign.findOneImpl)(Control_Monad_Eff_Uncurried.mkEffFn1(onError))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($95) {
                      return onSuccess(Data_Nullable.toMaybe($95));
                  }))(v.value1)(f);
              };
          });
      };
  };
  var define = function (s) {
      return function (n) {
          return function (fs) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Model.create(n))(Control_Monad_Eff_Uncurried.runEffFn3($foreign.defineImpl)(s)(n)(fs));
          };
      };
  };
  var create = function (v) {
      return function (f) {
          return Control_Monad_Aff.makeAff(function (onError) {
              return function (onSuccess) {
                  return Control_Monad_Eff_Uncurried.runEffFn4($foreign.createImpl)(Control_Monad_Eff_Uncurried.mkEffFn1(onError))(Control_Monad_Eff_Uncurried.mkEffFn1(onSuccess))(v.value1)(f);
              };
          });
      };
  };
  var authenticate = function (sql) {
      return Control_Monad_Aff.makeAff(function (onError) {
          return function (onSuccess) {
              return Control_Monad_Eff_Uncurried.runEffFn3($foreign.authenticateImpl)(Control_Monad_Eff_Uncurried.mkEffFn1(onError))(onSuccess(Data_Unit.unit))(sql);
          };
      });
  };
  exports["Mysql"] = Mysql;
  exports["Sqlite"] = Sqlite;
  exports["Postgres"] = Postgres;
  exports["Mssql"] = Mssql;
  exports["Model"] = Model;
  exports["authenticate"] = authenticate;
  exports["create"] = create;
  exports["define"] = define;
  exports["findOne"] = findOne;
  exports["get"] = get;
  exports["hasMany"] = hasMany;
  exports["sequelize"] = sequelize;
  exports["sync"] = sync;
  exports["showDialect"] = showDialect;
})(PS["Database.Sequelize"] = PS["Database.Sequelize"] || {});
(function(exports) {
  // Generated by purs version 0.11.6
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Record_Class = PS["Data.Record.Class"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_URI = PS["Data.URI"];
  var Database_Sequelize = PS["Database.Sequelize"];
  var Database_Sequelize_Fields = PS["Database.Sequelize.Fields"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var main = function __do() {
      Control_Monad_Eff_Console.log("Hello sailor!")();
      var args = {
          database: "athan", 
          username: "athan", 
          password: "foo", 
          host: new Data_URI.NameAddress("localhost"), 
          dialect: Database_Sequelize.Postgres.value, 
          pool: {
              min: 0, 
              max: 5, 
              idle: 10000
          }
      };
      var v = Database_Sequelize.sequelize(args)();
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Console.errorShow(Control_Monad_Eff_Exception.showError))(Control_Monad_Eff_Console.logShow(Data_Show.showString))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Database_Sequelize.authenticate(v))(function () {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Database_Sequelize.define(v)("foo")(Database_Sequelize_Fields.addField(Data_Record_Class.srInst())(new Data_Symbol.IsSymbol(function () {
              return "bar";
          }))()()(Data_Symbol.SProxy.value)({
              type: Database_Sequelize_Fields.sqlINTEGER
          })(Database_Sequelize_Fields.addFieldWithDefault(Data_Record_Class.srInst())(new Data_Symbol.IsSymbol(function () {
              return "foo";
          }))()(Data_Symbol.SProxy.value)({
              type: Database_Sequelize_Fields.sqlSTRING
          })("foo!")(Database_Sequelize_Fields.emptyModelDefinition)))))(function (v1) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Database_Sequelize.define(v)("baz")(Database_Sequelize_Fields.addFieldWithDefault(Data_Record_Class.srInst())(new Data_Symbol.IsSymbol(function () {
                  return "baz";
              }))()(Data_Symbol.SProxy.value)({
                  type: Database_Sequelize_Fields.sqlSTRING
              })("foo!")(Database_Sequelize_Fields.emptyModelDefinition))))(function (v2) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Database_Sequelize.hasMany(v1)(v2))(function (v3) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Database_Sequelize.sync(v))(function () {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Database_Sequelize.create(v2)({}))(function (v4) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Database_Sequelize.findOne(v1)({
                                  where: {
                                      bar: 1
                                  }
                              }))(function (v5) {
                                  if (v5 instanceof Data_Maybe.Nothing) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Console.log("wut?!")))(function () {
                                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)("wut");
                                      });
                                  };
                                  if (v5 instanceof Data_Maybe.Just) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(v3.set(v5.value0)([ v4 ]))(function () {
                                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Database_Sequelize.get(v5.value0)({
                                              plain: true
                                          })))(function (v6) {
                                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v6.foo);
                                          });
                                      });
                                  };
                                  throw new Error("Failed pattern match at Main line 56, column 5 - line 63, column 28: " + [ v5.constructor.name ]);
                              });
                          });
                      });
                  });
              });
          });
      })))();
  };
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
